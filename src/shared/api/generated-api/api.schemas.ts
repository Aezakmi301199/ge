/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 */
export type ViewControllerFindByCityId401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type ViewControllerFindByCityId400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type ViewControllerFindByCityIdParams = {
  cityId: string[];
};

export type AmenityControllerGetAll401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetBuildings401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetBuildings400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetBuildingsParams = {
  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∏ÃÜ–æ–Ω–∞
   */
  districtId?: string;
  /**
   * –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è
   */
  name?: string;
};

export type CityControllerGetDistricts401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetDistricts400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetDistrictsParams = {
  /**
   * Name of the district
   */
  name?: string;
};

export type CityControllerGetAvailableCurrencies401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetAvailableCurrencies400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetCustomFields401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CityControllerGetCustomFields400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyAttachmentControllerDelete400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyAttachmentControllerUpdate400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyAttachmentControllerRotate400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetHistoryCount401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetHistoryCount400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetHistory401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetHistory400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetHistoryParams = {
  page: number;
};

export type PropertyControllerAddPublication401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerAddPublication400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerAddComment401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerAddComment400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindCommentsById401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindCommentsById400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindCommentsByIdParams = {
  page: number;
};

export type PropertyControllerCreateShow409 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCreateShow403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCreateShow401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCreateShow400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerUploadAttachment401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerUploadAttachment400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetDraft404 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetDraft403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetDraft401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerGetDraftParams = {
  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏
   */
  dealId: number;
};

export type PropertyControllerCreateDraft403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCreateDraft401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCreateDraft400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerUpdateStatus403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerUpdateStatus401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindById404 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindById401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindById400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerUpdate403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerUpdate401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCountByFilter401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerCountByFilter400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export enum PropertyControllerCountByFilterStatus {
  PRE_LISTING = 'PRE_LISTING',
  ACTIVE = 'ACTIVE',
  TO_FIX = 'TO_FIX',
  SUSPENDED = 'SUSPENDED',
  DEPOSIT = 'DEPOSIT',
  DELETED = 'DELETED',
  SOLD = 'SOLD',
}

export enum PropertyControllerCountByFilterCategory {
  PRIMARY = 'PRIMARY',
  SECONDARY = 'SECONDARY',
  COMMERCIAL = 'COMMERCIAL',
}

export enum PropertyControllerCountByFilterDealType {
  SALE = 'SALE',
  RENT = 'RENT',
}

export enum PropertyControllerCountByFilterPropertyType {
  APARTMENT = 'APARTMENT',
  TOWNHOUSE = 'TOWNHOUSE',
  VILLA = 'VILLA',
  BUNGALOW = 'BUNGALOW',
  LAND = 'LAND',
  COMPOUND = 'COMPOUND',
  DUPLEX = 'DUPLEX',
  PENTHOUSE = 'PENTHOUSE',
  FULL_FLOOR = 'FULL_FLOOR',
  HALF_FLOOR = 'HALF_FLOOR',
  WHOLE_BUILDING = 'WHOLE_BUILDING',
  BULK_UNITS = 'BULK_UNITS',
}

export type PropertyControllerCountByFilterParams = {
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  floorFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  floorTo?: number;
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  roomCount?: number;
  /**
   * –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –∑–¥–∞–Ω–∏–∏
   */
  floorCount?: number;
  /**
   * –ù–∞–ª–∏—á–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–ª—É–≥–∏
   */
  hasMaidRoom?: boolean;
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  bedroomCount?: number[];
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  bathroomCount?: number[];
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  sizeFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  sizeTo?: number;
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  plotSizeFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  plotSizeTo?: number;
  /**
   * –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º
   */
  isDraft?: boolean;
  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  cityId?: string;
  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–¥–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
   */
  buildingId?: string;
  /**
   * –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  propertyType: PropertyControllerCountByFilterPropertyType;
  /**
   * –¢–∏–ø —Å–¥–µ–ª–∫–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  dealType: PropertyControllerCountByFilterDealType;
  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  category: PropertyControllerCountByFilterCategory;
  /**
   * –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  status?: PropertyControllerCountByFilterStatus;
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
   */
  priceFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
   */
  priceTo?: number;
  /**
   * –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–¥–æ–±—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  amenities?: string[];
};

export type PropertyControllerFindByFilter401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type PropertyControllerFindByFilter400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export enum PropertyControllerFindByFilterOrderDirection {
  asc = 'asc',
  desc = 'desc',
}

export enum PropertyControllerFindByFilterOrderBy {
  price = 'price',
  area = 'area',
  createdAt = 'createdAt',
  updatedAt = 'updatedAt',
}

export enum PropertyControllerFindByFilterStatus {
  PRE_LISTING = 'PRE_LISTING',
  ACTIVE = 'ACTIVE',
  TO_FIX = 'TO_FIX',
  SUSPENDED = 'SUSPENDED',
  DEPOSIT = 'DEPOSIT',
  DELETED = 'DELETED',
  SOLD = 'SOLD',
}

export enum PropertyControllerFindByFilterCategory {
  PRIMARY = 'PRIMARY',
  SECONDARY = 'SECONDARY',
  COMMERCIAL = 'COMMERCIAL',
}

export enum PropertyControllerFindByFilterDealType {
  SALE = 'SALE',
  RENT = 'RENT',
}

export enum PropertyControllerFindByFilterPropertyType {
  APARTMENT = 'APARTMENT',
  TOWNHOUSE = 'TOWNHOUSE',
  VILLA = 'VILLA',
  BUNGALOW = 'BUNGALOW',
  LAND = 'LAND',
  COMPOUND = 'COMPOUND',
  DUPLEX = 'DUPLEX',
  PENTHOUSE = 'PENTHOUSE',
  FULL_FLOOR = 'FULL_FLOOR',
  HALF_FLOOR = 'HALF_FLOOR',
  WHOLE_BUILDING = 'WHOLE_BUILDING',
  BULK_UNITS = 'BULK_UNITS',
}

export type PropertyControllerFindByFilterParams = {
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  floorFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  floorTo?: number;
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  roomCount?: number;
  /**
   * –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –∑–¥–∞–Ω–∏–∏
   */
  floorCount?: number;
  /**
   * –ù–∞–ª–∏—á–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–ª—É–≥–∏
   */
  hasMaidRoom?: boolean;
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  bedroomCount?: number[];
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  bathroomCount?: number[];
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  sizeFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  sizeTo?: number;
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  plotSizeFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)
   */
  plotSizeTo?: number;
  /**
   * –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º
   */
  isDraft?: boolean;
  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  cityId?: string;
  /**
   * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–¥–∞–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
   */
  buildingId?: string;
  /**
   * –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  propertyType: PropertyControllerFindByFilterPropertyType;
  /**
   * –¢–∏–ø —Å–¥–µ–ª–∫–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  dealType: PropertyControllerFindByFilterDealType;
  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  category: PropertyControllerFindByFilterCategory;
  /**
   * –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  status?: PropertyControllerFindByFilterStatus;
  /**
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
   */
  priceFrom?: number;
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.
   */
  priceTo?: number;
  /**
   * –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–¥–æ–±—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  amenities?: string[];
  /**
   * –ö–æ–ª–æ–Ω–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
   */
  orderBy: PropertyControllerFindByFilterOrderBy;
  /**
   * –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  orderDirection: PropertyControllerFindByFilterOrderDirection;
  /**
   * –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  page: number;
};

export type DealControllerCreateCollection401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CollectionControllerRenewExpiration401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CollectionControllerRemoveProperty401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CollectionControllerAddProperty401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CollectionControllerExpire401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type CollectionControllerUpdate401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindCurrent401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindDeals403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindDeals401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindDeals400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export enum UserControllerFindDealsDealCategoryType {
  SALE = 'SALE',
  BUY = 'BUY',
}

export type UserControllerFindDealsParams = {
  dealCategoryType: UserControllerFindDealsDealCategoryType;
};

export type UserControllerFindCollections403 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindCollections401 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindCollections400 = {
  error?: string;
  message: string;
  statusCode: number;
};

export type UserControllerFindCollectionsParams = {
  isActive: boolean;
};

export enum FeatureCollectionType {
  FeatureCollection = 'FeatureCollection',
}

/**
 * GeoJSon Feature collection
 */
export interface FeatureCollection {
  features: Feature[];
  type: FeatureCollectionType;
}

export enum FeatureType {
  Feature = 'Feature',
}

export type FeatureProperties = { [key: string]: unknown };

/**
 * GeoJSon Feature
 */
export interface Feature {
  geometry: GeometryCollection;
  id: number;
  properties?: FeatureProperties;
  type: FeatureType;
}

/**
 * GeoJSon Feature collection
 */
export interface FeatureCollection {
  features: Feature[];
  type: FeatureCollectionType;
}

export enum GeometryCollectionType {
  GeometryCollection = 'GeometryCollection',
}

/**
 * GeoJSon geometry collection
 */
export interface GeometryCollection {
  geometries: Geometry[];
  type: GeometryCollectionType;
}

export enum MultiPolygonType {
  MultiPolygon = 'MultiPolygon',
}

export type MultiPolygonAllOf = {
  coordinates?: Point3D[][][];
};

/**
 * GeoJSon geometry
 */
export type MultiPolygon = Geometry &
  MultiPolygonAllOf & {
    type: MultiPolygonType;
  };

export enum MultiLineStringType {
  MultiLineString = 'MultiLineString',
}

export type MultiLineStringAllOf = {
  coordinates?: Point3D[][];
};

/**
 * GeoJSon geometry
 */
export type MultiLineString = Geometry &
  MultiLineStringAllOf & {
    type: MultiLineStringType;
  };

export enum MultiPointType {
  MultiPoint = 'MultiPoint',
}

export type MultiPointAllOf = {
  coordinates?: Point3D[];
};

/**
 * GeoJSon geometry
 */
export type MultiPoint = Geometry &
  MultiPointAllOf & {
    type: MultiPointType;
  };

export enum PolygonType {
  Polygon = 'Polygon',
}
export type PolygonAllOf = {
  coordinates?: Point3D[][];
};

/**
 * GeoJSon geometry
 */
export type Polygon = Geometry &
  PolygonAllOf & {
    type: PolygonType;
  };

export enum LineStringType {
  LineString = 'LineString',
}

export type LineStringAllOf = {
  coordinates?: Point3D[];
};

/**
 * GeoJSon geometry
 */
export type LineString = Geometry &
  LineStringAllOf & {
    type: LineStringType;
  };

export enum PointType {
  Point = 'Point',
}

/**
 * Point in 3D space
 * @minItems 2
 * @maxItems 3
 */
export type Point3D = number[];

export type PointAllOf = {
  coordinates?: Point3D;
};

/**
 * GeoJSon geometry
 */
export type Point = Geometry &
  PointAllOf & {
    type: PointType;
  };

/**
 * the geometry type
 */
export enum GeometryType {
  Point = 'Point',
  LineString = 'LineString',
  Polygon = 'Polygon',
  MultiPoint = 'MultiPoint',
  MultiLineString = 'MultiLineString',
  MultiPolygon = 'MultiPolygon',
}

/**
 * GeoJSon geometry
 */
export interface Geometry {
  /** the geometry type */
  type: GeometryType;
}

export interface ViewResponse {
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  name: string;
}

export interface AmenityResponse {
  /** @nullable */
  createdAt: string | null;
  iconName: string;
  id: string;
  name: string;
}

export interface BuildingLocationResponse {
  coordinates: string[];
  type: string;
}

export interface BuildingResponse {
  district: string;
  id: string;
  location: BuildingLocationResponse;
  name: string;
}

export interface DistrictResponse {
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  name: string;
  /** @nullable */
  updatedAt: string | null;
}

export interface CurrencyResponse {
  id: string;
  isoLetters: CurrencyISOLetters;
}

export type CustomFieldsResponseSchema = { [key: string]: unknown };

export interface CustomFieldsResponse {
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  schema: CustomFieldsResponseSchema;
}

export enum UpdateAttachmentDtoType {
  PHOTO = 'PHOTO',
  PASSPORT = 'PASSPORT',
  CONTRACT = 'CONTRACT',
  TITLE_DEED = 'TITLE_DEED',
}

export interface UpdateAttachmentDto {
  degrees: number;
  type: UpdateAttachmentDtoType;
}

export enum RotateAttachmentDtoType {
  PHOTO = 'PHOTO',
  PASSPORT = 'PASSPORT',
  CONTRACT = 'CONTRACT',
  TITLE_DEED = 'TITLE_DEED',
}

export interface RotateAttachmentDto {
  degrees: number;
  type: RotateAttachmentDtoType;
}

export type PropertyActionHistoryResponseData = { [key: string]: unknown };

export interface PropertyActionHistoryResponse {
  actionType: string;
  /** @nullable */
  createdAt: string | null;
  data: PropertyActionHistoryResponseData;
}

export interface PropertyPublicationResponse {
  /** @nullable */
  createdAt: string | null;
  /** @nullable */
  internalId: string | null;
  property: Property;
  propertyId: string;
  status: PublicationStatus;
  target: PublicationTarget;
  /** @nullable */
  updatedAt: string | null;
}

export interface CreatePropertyPublicationDto {
  target: string;
}

export interface CreatePropertyCommentDto {
  text: string;
}

export interface PropertyCommentResponse {
  /** @nullable */
  createdAt: string | null;
  id: string;
  propertyId: string;
  text: string;
  user: User;
  userId: string;
}

export interface ShowResponse {
  bitrixTaskId: number;
  /** @nullable */
  createdAt: string | null;
  initiatorDealId: number;
  property: Property;
  propertyId: string;
}

export interface DealIdDto {
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏ */
  dealId: number;
}

export interface PropertyAttachmentResponse {
  /** @nullable */
  createdAt: string | null;
  id: string;
  index: number;
  propertyId: string;
  type: AttachmentType;
  url: string;
}

export interface AddAttachmentDto {
  file: Blob;
  type: string;
}

export interface CreatePropertyDraftDto {
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä–µ–∫—Ç–∞ */
  category: string;
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ */
  cityId: string;
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏ */
  dealId: number;
  /** –¢–∏–ø —Å–¥–µ–ª–∫–∏ */
  dealType: string;
  propertyType: PropertyType;
}

/**
 * –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */
export enum UpdatePropertyStatusDtoStatus {
  PRE_LISTING = 'PRE_LISTING',
  ACTIVE = 'ACTIVE',
  TO_FIX = 'TO_FIX',
  SUSPENDED = 'SUSPENDED',
  DEPOSIT = 'DEPOSIT',
  DELETED = 'DELETED',
  SOLD = 'SOLD',
}
export interface UpdatePropertyStatusDto {
  /** –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  status: UpdatePropertyStatusDtoStatus;
}

/**
 * –ü–æ–ª—è, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */
export type UpdatePropertyDtoTypeFields = { [key: string]: unknown };

/**
 * –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */
export enum UpdatePropertyDtoStatus {
  PRE_LISTING = 'PRE_LISTING',
  ACTIVE = 'ACTIVE',
  TO_FIX = 'TO_FIX',
  SUSPENDED = 'SUSPENDED',
  DEPOSIT = 'DEPOSIT',
  DELETED = 'DELETED',
  SOLD = 'SOLD',
}

/**
 * –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */
export enum UpdatePropertyDtoPropertyType {
  APARTMENT = 'APARTMENT',
  TOWNHOUSE = 'TOWNHOUSE',
  VILLA = 'VILLA',
  BUNGALOW = 'BUNGALOW',
  LAND = 'LAND',
  COMPOUND = 'COMPOUND',
  DUPLEX = 'DUPLEX',
  PENTHOUSE = 'PENTHOUSE',
  FULL_FLOOR = 'FULL_FLOOR',
  HALF_FLOOR = 'HALF_FLOOR',
  WHOLE_BUILDING = 'WHOLE_BUILDING',
  BULK_UNITS = 'BULK_UNITS',
}

export interface UpdatePropertyDto {
  /** –°–ø–∏—Å–æ–∫ UUID —É–¥–æ–±—Å—Ç–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—ä–µ–∫—Ç–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  amenities?: string[];
  /** –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  category?: PropertyCategory;
  /** UUID –≥–æ—Ä–æ–¥–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –æ–±—ä–µ–∫—Ç–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  cityId: string;
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–ª—é—Ç—ã */
  currencyId?: string;
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–µ–ª–∫–∏ */
  dealId?: number;
  /**
   * –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
   * @maxLength 1500
   */
  descriptionEN?: string;
  /**
   * –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
   * @maxLength 1500
   */
  descriptionRU?: string;
  /** –£–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ */
  isDraft?: boolean;
  /** –®–∏—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  latitude?: number;
  /** –î–æ–ª–≥–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  longitude?: number;
  /**
   * –¶–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
   * @maximum 9999999999999
   */
  price?: number;
  /** –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  propertyType?: UpdatePropertyDtoPropertyType;
  /** –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  status?: UpdatePropertyDtoStatus;
  /** –ü–æ–ª—è, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  typeFields?: UpdatePropertyDtoTypeFields;
  /** –°–ø–∏—Å–æ–∫ UUID –≤–∏–¥–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—ä–µ–∫—Ç–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */
  views?: string[];
}

export interface CountResponse {
  count: number;
}

/**
 * @nullable
 */
export type GetPropertyDraftResponseTypeFields = { [key: string]: unknown } | null;

export interface GetPropertyDraftResponse {
  attachments: PropertyAttachment[];
  /** @nullable */
  bitrixDealId: number | null;
  /** @nullable */
  buildingId: string | null;
  category: PropertyCategory;
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  creatorId: string;
  /** @nullable */
  currencyId: string | null;
  dealType: DealType;
  /** @nullable */
  descriptionEN: string | null;
  /** @nullable */
  descriptionRU: string | null;
  /** @nullable */
  districtId: string | null;
  id: string;
  isDraft: boolean;
  /** @nullable */
  latitude: number | null;
  /** @nullable */
  longitude: number | null;
  /** @nullable */
  microdistrictId: string | null;
  /** @nullable */
  newBuildingId: string | null;
  portalId: string;
  /** @nullable */
  price: number | null;
  propertyAmenity: PropertyAmenity[];
  propertyType: PropertyType;
  responsibleId: string;
  /** @nullable */
  status: PropertyStatus;
  /** @nullable */
  typeFields: GetPropertyDraftResponseTypeFields;
  /** @nullable */
  updatedAt: string | null;
  views: PropertyViews[];
}

/**
 * @nullable
 */
export type PropertyDraftResponseTypeFields = { [key: string]: unknown } | null;

export interface PropertyDraftResponse {
  attachments: PropertyAttachment[];
  /** @nullable */
  bitrixDealId: number | null;
  /** @nullable */
  buildingId: string | null;
  category: PropertyCategory;
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  creatorId: string;
  /** @nullable */
  currencyId: string | null;
  dealType: DealType;
  /** @nullable */
  descriptionEN: string | null;
  /** @nullable */
  descriptionRU: string | null;
  /** @nullable */
  districtId: string | null;
  id: string;
  isDraft: boolean;
  /** @nullable */
  latitude: number | null;
  /** @nullable */
  longitude: number | null;
  /** @nullable */
  microdistrictId: string | null;
  /** @nullable */
  newBuildingId: string | null;
  portalId: string;
  /** @nullable */
  price: number | null;
  propertyAmenity: PropertyAmenity[];
  propertyType: PropertyType;
  responsibleId: string;
  /** @nullable */
  status: PropertyStatus;
  /** @nullable */
  typeFields: PropertyDraftResponseTypeFields;
  /** @nullable */
  updatedAt: string | null;
  views: PropertyViews[];
}

/**
 * @nullable
 */
export type PropertyResponseTypeFields = { [key: string]: unknown } | null;

/**
 * @nullable
 */
export type PropertyResponseNewBuilding = NewBuilding | null;

/**
 * @nullable
 */
export type PropertyResponseMicrodistrict = Microdistrict | null;

/**
 * @nullable
 */
export type PropertyResponseDistrict = District | null;

/**
 * @nullable
 */
export type PropertyResponseCurrency = Currency | null;

/**
 * @nullable
 */
export type PropertyResponseBuilding = Building | null;

export interface PropertyResponse {
  actionHistory: PropertyActionHistory[];
  attachments: PropertyAttachment[];
  /** @nullable */
  bitrixDealId: number | null;
  /** @nullable */
  building: PropertyResponseBuilding;
  /** @nullable */
  buildingId: string | null;
  category: PropertyCategory;
  city: City;
  cityId: string;
  collections: PropertyCollection[];
  comments: PropertyComment[];
  /** @nullable */
  createdAt: string | null;
  creator: User;
  creatorId: string;
  /** @nullable */
  currency: PropertyResponseCurrency;
  /** @nullable */
  currencyId: string | null;
  dealType: DealType;
  /** @nullable */
  descriptionEN: string | null;
  /** @nullable */
  descriptionRU: string | null;
  /** @nullable */
  district: PropertyResponseDistrict;
  /** @nullable */
  districtId: string | null;
  id: string;
  isDraft: boolean;
  /** @nullable */
  latitude: number | null;
  /** @nullable */
  longitude: number | null;
  /** @nullable */
  microdistrict: PropertyResponseMicrodistrict;
  /** @nullable */
  microdistrictId: string | null;
  /** @nullable */
  newBuilding: PropertyResponseNewBuilding;
  /** @nullable */
  newBuildingId: string | null;
  portal: Portal;
  portalId: string;
  /** @nullable */
  price: number | null;
  priceHistory: PropertyPriceHistory[];
  propertyAmenity: PropertyAmenity[];
  propertyType: PropertyType;
  publications: PropertyPublication[];
  responsible: User;
  responsibleId: string;
  shows: Show[];
  /** @nullable */
  status: PropertyStatus;
  /** @nullable */
  typeFields: PropertyResponseTypeFields;
  /** @nullable */
  updatedAt: string | null;
  views: PropertyViews[];
}

export interface CreateCollectionDto {
  name: string;
  propertyIds: string[];
}

export interface UuidDto {
  id: string;
}

export interface UpdateCollectionDto {
  name: string;
}

export type UserResponseDepartments = { [key: string]: unknown };

/**
 * @nullable
 */
export type UserResponseAdminToken = UserAdminToken | null;

export interface UserResponse {
  actionHistory: PropertyActionHistory[];
  /** @nullable */
  adminToken: UserResponseAdminToken;
  bitrixUserId: number;
  collections: Collection[];
  comments: PropertyComment[];
  /** @nullable */
  createdAt: string | null;
  createdProperty: Property[];
  departments: UserResponseDepartments;
  email: string;
  id: string;
  lastLoginAt: string;
  name: string;
  /** @nullable */
  patronymic: string | null;
  /** @nullable */
  photo: string | null;
  portal: Portal;
  portalId: string;
  portalUserId: number;
  registeredAt: string;
  responsibleForProperty: Property[];
  role: Role;
  roleId: string;
  status: UserStatus;
  surname: string;
  /** @nullable */
  updatedAt: string | null;
}

export interface DealResponse {
  id: string;
  title: string;
}

export interface CollectionResponse {
  bitrixTodoId: number;
  createdAt: string;
  creatorDealId: number;
  expiresAt: string;
  id: string;
  name: string;
  properties: PropertyCollection[];
  user: User;
  userId: string;
}

export type UserDepartments = { [key: string]: unknown };

export interface User {
  actionHistory: PropertyActionHistory[];
  /** @nullable */
  adminToken: UserAdminTokenProperty;
  bitrixUserId: number;
  collections: Collection[];
  comments: PropertyComment[];
  /** @nullable */
  createdAt: string | null;
  createdProperty: Property[];
  departments: UserDepartments;
  email: string;
  id: string;
  lastLoginAt: string;
  name: string;
  /** @nullable */
  patronymic: string | null;
  /** @nullable */
  photo: string | null;
  portal: Portal;
  portalId: string;
  portalUserId: number;
  registeredAt: string;
  responsibleForProperty: Property[];
  role: Role;
  roleId: string;
  status: UserStatus;
  surname: string;
  /** @nullable */
  updatedAt: string | null;
}

export interface UserAdminToken {
  accessTokenCipher: string;
  /** @nullable */
  createdAt: string | null;
  refreshTokenCipher: string;
  /** @nullable */
  updatedAt: string | null;
  user: User;
  userId: string;
}

/**
 * @nullable
 */
export type UserAdminTokenProperty = UserAdminToken | null;

/**
 * @nullable
 */
export type PortalDepartmentsProperty = PortalDepartments | null;

export interface Portal {
  /** @nullable */
  appId: number | null;
  citiesPortals: CitiesPortals[];
  /** @nullable */
  clientIdCipher: string | null;
  /** @nullable */
  clientSecretCipher: string | null;
  /** @nullable */
  createdAt: string | null;
  dealCategories: PortalDealCategories[];
  departmentRoles: PortalDepartmentRoles[];
  /** @nullable */
  departments: PortalDepartmentsProperty;
  domain: string;
  hash: string;
  id: string;
  property: Property[];
  /** @nullable */
  updatedAt: string | null;
  users: User[];
}

export enum DealCategory {
  SALE = 'SALE',
  BUY = 'BUY',
}

export interface PortalDealCategories {
  categoryId: number;
  id: string;
  portal: Portal;
  portalId: string;
  type: DealCategory;
}

export enum UserRole {
  REALTOR = 'REALTOR',
  MANAGER = 'MANAGER',
  MODERATOR = 'MODERATOR',
  ADMIN = 'ADMIN',
}

export interface Role {
  /** @nullable */
  createdAt: string | null;
  departmentRoles: PortalDepartmentRoles[];
  id: string;
  isDefault: boolean;
  name: UserRole;
  users: User[];
}

export interface PortalDepartmentRoles {
  bitrixDepartmentId: number;
  portal: Portal;
  portalId: string;
  role: Role;
  roleId: string;
}

/**
 * @nullable
 */
export type PropertyTypeFields = { [key: string]: unknown } | null;

export interface Property {
  /** @nullable */
  bitrixDealId: number | null;
  /** @nullable */
  buildingId: string | null;
  category: PropertyCategory;
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  creatorId: string;
  /** @nullable */
  currencyId: string | null;
  dealType: DealType;
  /** @nullable */
  descriptionEN: string | null;
  /** @nullable */
  descriptionRU: string | null;
  /** @nullable */
  districtId: string | null;
  id: string;
  isDraft: boolean;
  /** @nullable */
  latitude: number | null;
  /** @nullable */
  longitude: number | null;
  /** @nullable */
  microdistrictId: string | null;
  /** @nullable */
  newBuildingId: string | null;
  portalId: string;
  /** @nullable */
  price: number | null;
  propertyType: PropertyType;
  responsibleId: string;
  /** @nullable */
  status: PropertyStatus;
  /** @nullable */
  typeFields: PropertyTypeFields;
  /** @nullable */
  updatedAt: string | null;
}

export interface PropertyComment {
  /** @nullable */
  createdAt: string | null;
  id: string;
  property: Property;
  propertyId: string;
  text: string;
  user: User;
  userId: string;
}

export enum PublicationStatus {
  REQUESTED = 'REQUESTED',
  DRAFT_CREATED = 'DRAFT_CREATED',
  PUBLISHED = 'PUBLISHED',
  FAILED = 'FAILED',
  UPDATE_REQUESTED = 'UPDATE_REQUESTED',
  UPDATED = 'UPDATED',
}

export enum PublicationTarget {
  PROPERTY_FINDER = 'PROPERTY_FINDER',
  ETAGI = 'ETAGI',
}

export interface PropertyPublication {
  /** @nullable */
  createdAt: string | null;
  /** @nullable */
  internalId: string | null;
  property: Property;
  propertyId: string;
  status: PublicationStatus;
  target: PublicationTarget;
  /** @nullable */
  updatedAt: string | null;
}

export interface Show {
  bitrixTaskId: number;
  /** @nullable */
  createdAt: string | null;
  initiatorDealId: number;
  property: Property;
  propertyId: string;
}

export interface Collection {
  bitrixTodoId: number;
  createdAt: string;
  creatorDealId: number;
  expiresAt: string;
  id: string;
  name: string;
  properties: PropertyCollection[];
  user: User;
  userId: string;
}

export interface PropertyCollection {
  collection: Collection;
  collectionId: string;
  property: PropertyResponse;
  propertyId: string;
}

export enum AttachmentType {
  PHOTO = 'PHOTO',
  PASSPORT = 'PASSPORT',
  CONTRACT = 'CONTRACT',
  TITLE_DEED = 'TITLE_DEED',
}

export interface PropertyAttachment {
  /** @nullable */
  createdAt: string | null;
  id: string;
  index: number;
  property: Property;
  propertyId: string;
  type: AttachmentType;
  url: string;
  domain: string;
}

export interface Amenity {
  /** @nullable */
  createdAt: string | null;
  iconName: string;
  id: string;
  name: string;
  propertyAmenity: PropertyAmenity[];
}

export interface PropertyAmenity {
  amenity: Amenity;
  amenityId: string;
  property: Property;
  propertyId: string;
}

/**
 * @nullable
 */
export type PropertyActionHistoryUpdater = User | null;

export type PropertyActionHistoryData = { [key: string]: unknown };

export interface PropertyActionHistory {
  actionType: string;
  /** @nullable */
  createdAt: string | null;
  data: PropertyActionHistoryData;
  id: string;
  property: Property;
  propertyId: string;
  /** @nullable */
  updater: PropertyActionHistoryUpdater;
  /** @nullable */
  updaterId: string | null;
}

/**
 * @nullable
 */
export type CityCityCustomFields = CityCustomField | null;

export interface City {
  buildings: Building[];
  citiesPortals: CitiesPortals[];
  cityCurrency: CityCurrency[];
  /** @nullable */
  cityCustomFields: CityCityCustomFields;
  country: Country;
  countryId: string;
  /** @nullable */
  createdAt: string | null;
  districts: District[];
  id: string;
  latitude: number;
  longitude: number;
  microdistricts: Microdistrict[];
  name: string;
  properties: Property[];
  /** @nullable */
  updatedAt: string | null;
  views: View[];
}

export interface PropertyPriceHistory {
  /** @nullable */
  createdAt: string | null;
  currency: Currency;
  currencyId: string;
  id: string;
  price: number;
  property: Property;
  propertyId: string;
}

export enum CurrencyISOLetters {
  RUB = 'RUB',
  AED = 'AED',
  USD = 'USD',
  THB = 'THB',
  EUR = 'EUR',
  BYN = 'BYN',
}

export interface Currency {
  id: string;
  isoLetters: CurrencyISOLetters;
}

export interface CityCurrency {
  city: City;
  cityId: string;
  currency: Currency;
  currencyId: string;
}

export type CityCustomFieldSchema = { [key: string]: unknown };

export interface CityCustomField {
  city: City;
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  schema: CityCustomFieldSchema;
}

export type CitiesPortalsCityCountry = {
  name: string;
};

export type CitiesPortalsCity = {
  country: CitiesPortalsCityCountry;
  id: string;
  latitude: number;
  longitude: number;
  name: string;
};

export interface CitiesPortals {
  city: CitiesPortalsCity;
}

export interface PropertyViews {
  /** @nullable */
  createdAt: string | null;
  property: Property;
  propertyId: string;
  view: View;
  viewId: string;
}

export interface View {
  city: City;
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  name: string;
  properties: PropertyViews[];
}

/**
 * @nullable
 */
export type NewBuildingMicrodistrict = Microdistrict | null;

export interface NewBuilding {
  /** @nullable */
  createdAt: string | null;
  /** @nullable */
  description: string | null;
  id: string;
  /** @nullable */
  microdistrict: NewBuildingMicrodistrict;
  /** @nullable */
  microdistrictId: string | null;
  name: string;
  property: Property[];
  /** @nullable */
  updatedAt: string | null;
}

export interface Microdistrict {
  city: City;
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  name: string;
  newBuildings: NewBuilding[];
  properties: Property[];
  /** @nullable */
  updatedAt: string | null;
}

export interface Building {
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  location: Point;
  name: string;
  /** @nullable */
  number: string | null;
  /** @nullable */
  streetName: string | null;
  /** @nullable */
  updatedAt: string | null;
}

export interface District {
  cityId: string;
  /** @nullable */
  createdAt: string | null;
  id: string;
  name: string;
  /** @nullable */
  updatedAt: string | null;
}

export interface Country {
  cities: City[];
  /** @nullable */
  createdAt: string | null;
  id: string;
  name: string;
  /** @nullable */
  updatedAt: string | null;
}

export enum PropertyStatus {
  PRE_LISTING = 'PRE_LISTING',
  ACTIVE = 'ACTIVE',
  TO_FIX = 'TO_FIX',
  SUSPENDED = 'SUSPENDED',
  DEPOSIT = 'DEPOSIT',
  DELETED = 'DELETED',
  SOLD = 'SOLD',
}

export enum DealType {
  SALE = 'SALE',
  RENT = 'RENT',
}

export enum PropertyCategory {
  PRIMARY = 'PRIMARY',
  SECONDARY = 'SECONDARY',
  COMMERCIAL = 'COMMERCIAL',
}

export enum PropertyType {
  APARTMENT = 'APARTMENT',
  TOWNHOUSE = 'TOWNHOUSE',
  VILLA = 'VILLA',
  BUNGALOW = 'BUNGALOW',
  LAND = 'LAND',
  COMPOUND = 'COMPOUND',
  DUPLEX = 'DUPLEX',
  PENTHOUSE = 'PENTHOUSE',
  FULL_FLOOR = 'FULL_FLOOR',
  HALF_FLOOR = 'HALF_FLOOR',
  WHOLE_BUILDING = 'WHOLE_BUILDING',
  BULK_UNITS = 'BULK_UNITS',
}

export type PortalDepartmentsStructure = { [key: string]: unknown };

export interface PortalDepartments {
  /** @nullable */
  createdAt: string | null;
  portal: Portal;
  portalId: string;
  structure: PortalDepartmentsStructure;
  /** @nullable */
  updatedAt: string | null;
}

export enum UserStatus {
  ACTIVE = 'ACTIVE',
  FIRED = 'FIRED',
  ON_VACATION = 'ON_VACATION',
}
