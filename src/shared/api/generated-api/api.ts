/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 */
import type {
  AddAttachmentDto,
  AmenityResponse,
  BuildingResponse,
  CityControllerGetBuildingsParams,
  CityControllerGetDistrictsParams,
  CollectionResponse,
  CountResponse,
  CreateCollectionDto,
  CreatePropertyCommentDto,
  CreatePropertyDraftDto,
  CreatePropertyPublicationDto,
  CurrencyResponse,
  CustomFieldsResponse,
  DealIdDto,
  DealResponse,
  DistrictResponse,
  GetPropertyDraftResponse,
  PropertyActionHistoryResponse,
  PropertyAttachmentResponse,
  PropertyCommentResponse,
  PropertyControllerCountByFilterParams,
  PropertyControllerFindByFilterParams,
  PropertyControllerFindCommentsByIdParams,
  PropertyControllerGetDraftParams,
  PropertyControllerGetHistoryParams,
  PropertyPublicationResponse,
  PropertyResponse,
  RotateAttachmentDto,
  ShowResponse,
  UpdateAttachmentDto,
  UpdateCollectionDto,
  UpdatePropertyDto,
  UpdatePropertyStatusDto,
  UserControllerFindCollectionsParams,
  UserControllerFindDealsParams,
  UserResponse,
  UuidDto,
  ViewControllerFindByCityIdParams,
  ViewResponse,
} from './api.schemas';
import { apiClientInstance } from '../instance/api-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏—Ç—Ä–∏–∫—Å
 */
export const appControllerHandle = (options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<unknown>({ url: `/api/app/init`, method: 'POST' }, options);
};

/**
 * @summary –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏—Ç—Ä–∏–∫—Å
 */
export const appControllerInstall = (options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<unknown>({ url: `/api/app/install`, method: 'POST' }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const userControllerFindCollections = (
  id: string,
  params: UserControllerFindCollectionsParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CollectionResponse[]>(
    { url: `/api/user/${id}/collections`, method: 'GET', params },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const userControllerFindDeals = (
  id: string,
  params: UserControllerFindDealsParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<DealResponse[]>({ url: `/api/user/${id}/deals`, method: 'GET', params }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const userControllerFindCurrent = (options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<UserResponse>({ url: `/api/user`, method: 'GET' }, options);
};

/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ id
 */
export const collectionControllerFindOne = (id: string, options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<CollectionResponse>({ url: `/api/collection/${id}`, method: 'GET' }, options);
};

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
export const collectionControllerUpdate = (
  id: string,
  updateCollectionDto: UpdateCollectionDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CollectionResponse>(
    {
      url: `/api/collection/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateCollectionDto,
    },
    options,
  );
};

/**
 * @summary –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –∞—Ä—Ö–∏–≤
 */
export const collectionControllerExpire = (id: string, options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<CollectionResponse>({ url: `/api/collection/${id}/expire`, method: 'PUT' }, options);
};

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
 */
export const collectionControllerAddProperty = (
  id: string,
  uuidDto: UuidDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CollectionResponse>(
    {
      url: `/api/collection/${id}/add-property`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: uuidDto,
    },
    options,
  );
};

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
export const collectionControllerRemoveProperty = (
  id: string,
  uuidDto: UuidDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<void>(
    {
      url: `/api/collection/${id}/remove-property`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: uuidDto,
    },
    options,
  );
};

/**
 * @summary –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
export const collectionControllerRenewExpiration = (
  id: string,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CollectionResponse>(
    { url: `/api/collection/${id}/renew-expiration`, method: 'PUT' },
    options,
  );
};

/**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏
 */
export const dealControllerCreateCollection = (
  id: number,
  createCollectionDto: CreateCollectionDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CollectionResponse>(
    {
      url: `/api/deal/${id}/collection`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createCollectionDto,
    },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
 */
export const propertyControllerFindByFilter = (
  params: PropertyControllerFindByFilterParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyResponse[]>({ url: `/api/property`, method: 'GET', params }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
 */
export const propertyControllerCountByFilter = (
  params: PropertyControllerCountByFilterParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CountResponse>({ url: `/api/property/count`, method: 'GET', params }, options);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç
 */
export const propertyControllerUpdate = (
  id: string,
  updatePropertyDto: UpdatePropertyDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyResponse>(
    {
      url: `/api/property/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updatePropertyDto,
    },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –ø–æ ID
 */
export const propertyControllerFindById = (id: string, options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<PropertyResponse>({ url: `/api/property/${id}`, method: 'GET' }, options);
};

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
 */
export const propertyControllerUpdateStatus = (
  id: string,
  updatePropertyStatusDto: UpdatePropertyStatusDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyResponse>(
    {
      url: `/api/property/${id}/update-status`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updatePropertyStatusDto,
    },
    options,
  );
};

/**
 * @summary –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
 */
export const propertyControllerCreateDraft = (
  createPropertyDraftDto: CreatePropertyDraftDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyResponse>(
    {
      url: `/api/property/draft`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPropertyDraftDto,
    },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
 */
export const propertyControllerGetDraft = (
  params: PropertyControllerGetDraftParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<GetPropertyDraftResponse>({ url: `/api/property/draft`, method: 'GET', params }, options);
};

/**
 * @summary –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ
 */
export const propertyControllerUploadAttachment = (
  id: string,
  addAttachmentDto: AddAttachmentDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  const formData = new FormData();
  formData.append('file', addAttachmentDto.file);
  formData.append('type', addAttachmentDto.type);

  return apiClientInstance<PropertyAttachmentResponse>(
    {
      url: `/api/property/${id}/attachments`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options,
  );
};

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –ø–æ–∫–∞–∑ –ø–æ –æ–±—ä–µ–∫—Ç—É
 */
export const propertyControllerCreateShow = (
  id: string,
  dealIdDto: DealIdDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<ShowResponse>(
    {
      url: `/api/property/${id}/show`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: dealIdDto,
    },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç—É
 */
export const propertyControllerFindCommentsById = (
  id: string,
  params: PropertyControllerFindCommentsByIdParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyCommentResponse[]>(
    { url: `/api/property/${id}/comments`, method: 'GET', params },
    options,
  );
};

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—ä–µ–∫—Ç—É
 */
export const propertyControllerAddComment = (
  id: string,
  createPropertyCommentDto: CreatePropertyCommentDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyCommentResponse>(
    {
      url: `/api/property/${id}/comment`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPropertyCommentDto,
    },
    options,
  );
};

/**
 * @summary –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
 */
export const propertyControllerAddPublication = (
  id: string,
  createPropertyPublicationDto: CreatePropertyPublicationDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyPublicationResponse>(
    {
      url: `/api/property/${id}/publication`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPropertyPublicationDto,
    },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –æ–±—ä–µ–∫—Ç—É
 */
export const propertyControllerGetHistory = (
  id: string,
  params: PropertyControllerGetHistoryParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyActionHistoryResponse[]>(
    { url: `/api/property/${id}/action-history`, method: 'GET', params },
    options,
  );
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –æ–±—ä–µ–∫—Ç—É
 */
export const propertyControllerGetHistoryCount = (id: string, options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<CountResponse[]>(
    { url: `/api/property/${id}/action-history/count`, method: 'GET' },
    options,
  );
};

export const propertyAttachmentControllerRotate = (
  id: string,
  rotateAttachmentDto: RotateAttachmentDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyAttachmentResponse>(
    {
      url: `/api/property-attachments/${id}/rotate`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: rotateAttachmentDto,
    },
    options,
  );
};

export const propertyAttachmentControllerUpdate = (
  id: string,
  updateAttachmentDto: UpdateAttachmentDto,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<PropertyAttachmentResponse>(
    {
      url: `/api/property-attachments/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateAttachmentDto,
    },
    options,
  );
};

export const propertyAttachmentControllerDelete = (id: string, options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<void>({ url: `/api/property-attachments/${id}`, method: 'DELETE' }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞
 */
export const cityControllerGetCustomFields = (id: string, options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<CustomFieldsResponse>({ url: `/api/city/${id}/custom-fields`, method: 'GET' }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≥–æ—Ä–æ–¥–∞
 */
export const cityControllerGetAvailableCurrencies = (
  id: string,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<CurrencyResponse[]>({ url: `/api/city/${id}/currency`, method: 'GET' }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞
 */
export const cityControllerGetDistricts = (
  id: string,
  params?: CityControllerGetDistrictsParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<DistrictResponse[]>({ url: `/api/city/${id}/districts`, method: 'GET', params }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
 */
export const cityControllerGetBuildings = (
  id: string,
  params?: CityControllerGetBuildingsParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<BuildingResponse[]>({ url: `/api/city/${id}/buildings`, method: 'GET', params }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–¥–æ–±—Å—Ç–≤
 */
export const amenityControllerGetAll = (options?: SecondParameter<typeof apiClientInstance>) => {
  return apiClientInstance<AmenityResponse[]>({ url: `/api/amenity`, method: 'GET' }, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É
 */
export const viewControllerFindByCityId = (
  params: ViewControllerFindByCityIdParams,
  options?: SecondParameter<typeof apiClientInstance>,
) => {
  return apiClientInstance<ViewResponse[]>({ url: `/api/view`, method: 'GET', params }, options);
};

export type AppControllerHandleResult = NonNullable<Awaited<ReturnType<typeof appControllerHandle>>>;
export type AppControllerInstallResult = NonNullable<Awaited<ReturnType<typeof appControllerInstall>>>;
export type UserControllerFindCollectionsResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindCollections>>
>;
export type UserControllerFindDealsResult = NonNullable<Awaited<ReturnType<typeof userControllerFindDeals>>>;
export type UserControllerFindCurrentResult = NonNullable<Awaited<ReturnType<typeof userControllerFindCurrent>>>;
export type CollectionControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof collectionControllerFindOne>>>;
export type CollectionControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof collectionControllerUpdate>>>;
export type CollectionControllerExpireResult = NonNullable<Awaited<ReturnType<typeof collectionControllerExpire>>>;
export type CollectionControllerAddPropertyResult = NonNullable<
  Awaited<ReturnType<typeof collectionControllerAddProperty>>
>;
export type CollectionControllerRemovePropertyResult = NonNullable<
  Awaited<ReturnType<typeof collectionControllerRemoveProperty>>
>;
export type CollectionControllerRenewExpirationResult = NonNullable<
  Awaited<ReturnType<typeof collectionControllerRenewExpiration>>
>;
export type DealControllerCreateCollectionResult = NonNullable<
  Awaited<ReturnType<typeof dealControllerCreateCollection>>
>;
export type PropertyControllerFindByFilterResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerFindByFilter>>
>;
export type PropertyControllerCountByFilterResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerCountByFilter>>
>;
export type PropertyControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof propertyControllerUpdate>>>;
export type PropertyControllerFindByIdResult = NonNullable<Awaited<ReturnType<typeof propertyControllerFindById>>>;
export type PropertyControllerUpdateStatusResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerUpdateStatus>>
>;
export type PropertyControllerCreateDraftResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerCreateDraft>>
>;
export type PropertyControllerGetDraftResult = NonNullable<Awaited<ReturnType<typeof propertyControllerGetDraft>>>;
export type PropertyControllerUploadAttachmentResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerUploadAttachment>>
>;
export type PropertyControllerCreateShowResult = NonNullable<Awaited<ReturnType<typeof propertyControllerCreateShow>>>;
export type PropertyControllerFindCommentsByIdResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerFindCommentsById>>
>;
export type PropertyControllerAddCommentResult = NonNullable<Awaited<ReturnType<typeof propertyControllerAddComment>>>;
export type PropertyControllerAddPublicationResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerAddPublication>>
>;
export type PropertyControllerGetHistoryResult = NonNullable<Awaited<ReturnType<typeof propertyControllerGetHistory>>>;
export type PropertyControllerGetHistoryCountResult = NonNullable<
  Awaited<ReturnType<typeof propertyControllerGetHistoryCount>>
>;
export type PropertyAttachmentControllerRotateResult = NonNullable<
  Awaited<ReturnType<typeof propertyAttachmentControllerRotate>>
>;
export type PropertyAttachmentControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof propertyAttachmentControllerUpdate>>
>;
export type PropertyAttachmentControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof propertyAttachmentControllerDelete>>
>;
export type CityControllerGetCustomFieldsResult = NonNullable<
  Awaited<ReturnType<typeof cityControllerGetCustomFields>>
>;
export type CityControllerGetAvailableCurrenciesResult = NonNullable<
  Awaited<ReturnType<typeof cityControllerGetAvailableCurrencies>>
>;
export type CityControllerGetDistrictsResult = NonNullable<Awaited<ReturnType<typeof cityControllerGetDistricts>>>;
export type CityControllerGetBuildingsResult = NonNullable<Awaited<ReturnType<typeof cityControllerGetBuildings>>>;
export type AmenityControllerGetAllResult = NonNullable<Awaited<ReturnType<typeof amenityControllerGetAll>>>;
export type ViewControllerFindByCityIdResult = NonNullable<Awaited<ReturnType<typeof viewControllerFindByCityId>>>;
