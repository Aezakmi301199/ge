var y = Object.defineProperty;
var P = (s, e, t) => e in s ? y(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var h = (s, e, t) => P(s, typeof e != "symbol" ? e + "" : e, t);
function X(s) {
  return new Promise((e, t) => {
    let i = !1, r = document.querySelector(`script[src^="${s}"]`);
    if (r) {
      e(r);
      return;
    } else
      r = document.createElement("script"), r.async = !0, r.src = s, i = !0;
    r.addEventListener("error", t), r.addEventListener("abort", t), r.addEventListener("load", (n) => {
      e(n.target);
    }), i && document.head.append(r);
  });
}
var f = { exports: {} };
f.exports = B;
var g = f.exports.isMobile = B;
f.exports.default = B;
const A = /(android|bb\d+|meego).+mobile|armv7l|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|samsungbrowser.*mobile|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i, x = /CrOS/, E = /android|ipad|playbook|silk/i;
function B(s) {
  s || (s = {});
  let e = s.ua;
  if (!e && typeof navigator < "u" && (e = navigator.userAgent), e && e.headers && typeof e.headers["user-agent"] == "string" && (e = e.headers["user-agent"]), typeof e != "string") return !1;
  let t = A.test(e) && !x.test(e) || !!s.tablet && E.test(e);
  return !t && s.tablet && s.featureDetect && navigator && navigator.maxTouchPoints > 1 && e.indexOf("Macintosh") !== -1 && e.indexOf("Safari") !== -1 && (t = !0), t;
}
class M {
  constructor(e) {
    h(this, "BX24");
    this.BX24 = e;
  }
  init() {
    return new Promise((e) => {
      this.BX24.init(e);
    });
  }
  install(e = "") {
    return e.length ? (this.BX24.install(e), Promise.resolve()) : new Promise((t) => {
      this.BX24.install(t);
    });
  }
  installFinish() {
    this.BX24.installFinish();
  }
  getAuth() {
    return this.BX24.getAuth();
  }
  refreshAuth() {
    return new Promise((e) => {
      this.BX24.refreshAuth(e);
    });
  }
  callMethod(e, t, i) {
    this.BX24.callMethod(e, t, i);
  }
  callBatch(e, t) {
    return new Promise((i) => {
      this.BX24.callBatch(e, i, t);
    });
  }
  callBind(e, t, i, r) {
    return this.BX24.callBind(e, t, i, r), this.callUnbind.bind(this, e, t, i, r);
  }
  callUnbind(e, t, i, r) {
    this.BX24.callUnbind(e, t, i, r);
  }
  get userOption() {
    return {
      set: (e, t) => {
        this.BX24.userOption.set(e, t);
      },
      get: (e) => this.BX24.userOption.get(e)
    };
  }
  get appOption() {
    return {
      set: (e, t) => new Promise((i) => {
        this.BX24.appOption.set(e, t, i);
      }),
      get: (e) => this.BX24.appOption.get(e)
    };
  }
  selectUser() {
    return new Promise((e) => {
      this.BX24.selectUser(e);
    });
  }
  selectUsers() {
    return new Promise((e) => {
      this.BX24.selectUsers(e);
    });
  }
  selectAccess(e = []) {
    return new Promise((t) => {
      e.length ? this.BX24.selectAccess(e, t) : this.BX24.selectAccess(t);
    });
  }
  selectCRM(e) {
    return new Promise((t) => {
      e ? this.BX24.selectCRM(e, t) : this.BX24.selectCRM(t);
    });
  }
  get placement() {
    return {
      bindEvent: (e) => new Promise((t) => {
        this.BX24.placement.bindEvent(e, t);
      }),
      call: (e, t) => new Promise((i) => {
        this.BX24.placement.call(e, t, i);
      }),
      getInterface: () => new Promise((e) => {
        this.BX24.placement.getInterface(e);
      }),
      info: () => this.BX24.placement.info()
    };
  }
  isAdmin() {
    return this.BX24.isAdmin();
  }
  getLang() {
    return this.BX24.getLang();
  }
  resizeWindow(e, t) {
    return new Promise((i) => {
      this.BX24.resizeWindow(e, t, i);
    });
  }
  fitWindow() {
    return new Promise((e) => {
      this.BX24.fitWindow(e);
    });
  }
  reloadWindow() {
    this.BX24.reloadWindow();
  }
  setTitle(e) {
    return new Promise((t) => {
      this.BX24.setTitle(e, t);
    });
  }
  ready() {
    return new Promise((e) => {
      this.BX24.ready(e);
    });
  }
  isReady() {
    return this.BX24.isReady();
  }
  proxy(e, t) {
    return this.BX24.proxy(e, t);
  }
  closeApplication() {
    this.BX24.closeApplication();
  }
  getDomain(e = !1) {
    const t = this.BX24.getDomain();
    return e ? ["https:", t].join("//") : t;
  }
  openApplication(e) {
    return new Promise((t) => {
      this.BX24.openApplication(e, t);
    });
  }
  openPath(e) {
    return new Promise((t, i) => {
      this.BX24.openPath(e, (r) => {
        r.result === "error" && i(new Error(r.errorCode)), t();
      });
    });
  }
  proxyContext() {
    return this.BX24.proxyContext();
  }
  scrollParentWindow(e) {
    return new Promise((t) => {
      this.BX24.scrollParentWindow(e, t);
    });
  }
  bind(e, t, i) {
    return this.BX24.bind(e, t, i), this.unbind.bind(this, e, t, i);
  }
  unbind(e, t, i) {
    this.BX24.unbind(e, t, i);
  }
  getScrollSize() {
    return this.BX24.getScrollSize();
  }
  get im() {
    return {
      callTo: (e, t) => {
        this.BX24.im.callTo(e, t);
      },
      phoneTo: (e) => {
        this.BX24.im.phoneTo(e);
      },
      openMessenger: (e) => {
        this.BX24.im.openMessenger(e);
      },
      openHistory: (e) => {
        this.BX24.im.openHistory(e);
      }
    };
  }
}
class O {
  constructor(e, t = {}) {
    h(this, "callBatch");
    h(this, "handler");
    h(this, "commands", []);
    h(this, "result", {});
    h(this, "errors", {});
    h(this, "delay", 500);
    h(this, "limit", 50);
    this.callBatch = e, this.handler = t;
  }
  batch(e) {
    return this.commands = [], this.result = {}, this.errors = {}, new Promise((t, i) => {
      const r = this.parseRequest(e), n = [];
      let a = 0;
      this.callBatch(r, (m) => {
        Object.entries(m).forEach(([l, c]) => {
          const o = c.error();
          o && (this.errors[l] = o, a += 1);
          const u = c.total(), d = c.data();
          let p = 1;
          if (d && (Array.isArray(d.items) ? p = d.items.length : Array.isArray(d) && (p = d.length)), this.result[l] = d, u > this.limit && u > p) {
            const b = Math.ceil(u / this.limit) - 1, w = Array.from({ length: b });
            n.push([l, r[l], w]);
          }
        }), a > 0 ? (this.errorLogger(), i(this.errors)) : n.length ? (this.buildCommandsArray(n), this.batchPayload().then(() => t(this.parseResult()))) : t(this.parseResult());
      });
    });
  }
  buildCommandsArray(e) {
    let t = [];
    e.forEach(([i, r, n]) => {
      n.forEach((a, m) => {
        const l = m + 1, c = this.limit * l, u = [[i, l].join("_"), this.addStart(r, c)];
        t.length === this.limit ? (this.commands.push(t), t = [u]) : t.push(u);
      });
    }), t.length && this.commands.push(t);
  }
  batchPayload() {
    const e = [];
    return this.commands.forEach((t) => {
      const i = Object.fromEntries(t), r = new Promise((n) => {
        setTimeout(() => {
          this.callBatch(i, (a) => {
            Object.entries(a).forEach(([m, l]) => {
              const [c] = m.split("_"), o = l.data();
              o != null && o.items ? this.result[c].items.push(...o.items) : Array.isArray(o) && this.result[c].push(...o);
            }), n();
          });
        }, this.delay);
      });
      e.push(r);
    }), Promise.all(e);
  }
  parseResult() {
    return Object.entries(this.handler).forEach(([e, t]) => {
      this.result[e] && (this.result[e] = t(this.result[e]));
    }), this.result;
  }
  // eslint-disable-next-line class-methods-use-this
  parseRequest(e) {
    return Object.entries(e).reduce((t, [i, r]) => {
      if (Array.isArray(r)) {
        const [n, a = {}] = r;
        t[i] = [n, a];
      } else {
        const { method: n, params: a = {} } = r;
        t[i] = [n, a];
      }
      return t;
    }, {});
  }
  // eslint-disable-next-line class-methods-use-this
  addStart(e, t) {
    const [i, r] = e;
    return [i, { start: t, ...r }];
  }
  errorLogger() {
    console.group(`${this.constructor.name}: Ошибки в методах!`), Object.entries(this.errors).forEach(([e, t]) => {
      console.info(`[${e}]`, t.toString());
    }), console.groupEnd();
  }
}
class L extends M {
  isMobile(e) {
    return g(e);
  }
  loadScript(e) {
    return X(e);
  }
  createBatch(e = {}, t = O) {
    return new t(this.BX24.callBatch, e);
  }
  openLink(e, t = !1) {
    const i = (r) => {
      const n = document.createElement("a");
      n.href = [this.getDomain(!0), r].join(""), n.target = "_blank", n.click();
    };
    t || g() ? i(e) : this.openPath(e).catch(() => i(e));
  }
}
const S = {
  async init() {
    await X("https://api.bitrix24.com/api/v1/");
    const s = new L(window.BX24);
    return s.init().then(() => s);
  }
};
export {
  S as default
};
